// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: nextKeyValue.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AckSyncDialerClient is the client API for AckSyncDialer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AckSyncDialerClient interface {
	// Sends a ack
	Dial(ctx context.Context, opts ...grpc.CallOption) (AckSyncDialer_DialClient, error)
}

type ackSyncDialerClient struct {
	cc grpc.ClientConnInterface
}

func NewAckSyncDialerClient(cc grpc.ClientConnInterface) AckSyncDialerClient {
	return &ackSyncDialerClient{cc}
}

func (c *ackSyncDialerClient) Dial(ctx context.Context, opts ...grpc.CallOption) (AckSyncDialer_DialClient, error) {
	stream, err := c.cc.NewStream(ctx, &AckSyncDialer_ServiceDesc.Streams[0], "/proto.AckSyncDialer/dial", opts...)
	if err != nil {
		return nil, err
	}
	x := &ackSyncDialerDialClient{stream}
	return x, nil
}

type AckSyncDialer_DialClient interface {
	Send(*SyncD) error
	Recv() (*NextKeyValue, error)
	grpc.ClientStream
}

type ackSyncDialerDialClient struct {
	grpc.ClientStream
}

func (x *ackSyncDialerDialClient) Send(m *SyncD) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ackSyncDialerDialClient) Recv() (*NextKeyValue, error) {
	m := new(NextKeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AckSyncDialerServer is the server API for AckSyncDialer service.
// All implementations must embed UnimplementedAckSyncDialerServer
// for forward compatibility
type AckSyncDialerServer interface {
	// Sends a ack
	Dial(AckSyncDialer_DialServer) error
	mustEmbedUnimplementedAckSyncDialerServer()
}

// UnimplementedAckSyncDialerServer must be embedded to have forward compatible implementations.
type UnimplementedAckSyncDialerServer struct {
}

func (UnimplementedAckSyncDialerServer) Dial(AckSyncDialer_DialServer) error {
	return status.Errorf(codes.Unimplemented, "method Dial not implemented")
}
func (UnimplementedAckSyncDialerServer) mustEmbedUnimplementedAckSyncDialerServer() {}

// UnsafeAckSyncDialerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AckSyncDialerServer will
// result in compilation errors.
type UnsafeAckSyncDialerServer interface {
	mustEmbedUnimplementedAckSyncDialerServer()
}

func RegisterAckSyncDialerServer(s grpc.ServiceRegistrar, srv AckSyncDialerServer) {
	s.RegisterService(&AckSyncDialer_ServiceDesc, srv)
}

func _AckSyncDialer_Dial_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AckSyncDialerServer).Dial(&ackSyncDialerDialServer{stream})
}

type AckSyncDialer_DialServer interface {
	Send(*NextKeyValue) error
	Recv() (*SyncD, error)
	grpc.ServerStream
}

type ackSyncDialerDialServer struct {
	grpc.ServerStream
}

func (x *ackSyncDialerDialServer) Send(m *NextKeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ackSyncDialerDialServer) Recv() (*SyncD, error) {
	m := new(SyncD)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AckSyncDialer_ServiceDesc is the grpc.ServiceDesc for AckSyncDialer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AckSyncDialer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AckSyncDialer",
	HandlerType: (*AckSyncDialerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "dial",
			Handler:       _AckSyncDialer_Dial_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "nextKeyValue.proto",
}
